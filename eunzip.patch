--- zipfile.py	2015-02-25 19:27:45.000000000 +0800
+++ eunzip	2015-03-17 15:48:01.545110623 +0800
@@ -1,3 +1,4 @@
+#!/usr/bin/python3
 """
 Read and write ZIP files.
 
@@ -896,7 +897,7 @@
     fp = None                   # Set here since __del__ checks it
     _windows_illegal_name_trans_table = None
 
-    def __init__(self, file, mode="r", compression=ZIP_STORED, allowZip64=True):
+    def __init__(self, file, mode="r", compression=ZIP_STORED, allowZip64=True, encoding=None):
         """Open the ZIP file with mode read "r", write "w" or append "a"."""
         if mode not in ("r", "w", "a"):
             raise RuntimeError('ZipFile() requires mode "r", "w", or "a"')
@@ -905,6 +906,7 @@
 
         self._allowZip64 = allowZip64
         self._didModify = False
+        self._encoding = encoding
         self.debug = 0  # Level of printing: 0 through 3
         self.NameToInfo = {}    # Find file info given name
         self.filelist = []      # List of ZipInfo instances for archive
@@ -1011,9 +1013,10 @@
             if flags & 0x800:
                 # UTF-8 file names extension
                 filename = filename.decode('utf-8')
+            elif self._encoding is None:
+                filename = filename.decode(sys.getfilesystemencoding())
             else:
-                # Historical ZIP filename encoding
-                filename = filename.decode('cp437')
+                filename = filename.decode(self._encoding)
             # Create ZipInfo instance to store file information
             x = ZipInfo(filename)
             x.extra = fp.read(centdir[_CD_EXTRA_FIELD_LENGTH])
@@ -1171,8 +1174,10 @@
             if zinfo.flag_bits & 0x800:
                 # UTF-8 filename
                 fname_str = fname.decode("utf-8")
+            elif self._encoding is None:
+                fname_str = fname.decode(sys.getfilesystemencoding())
             else:
-                fname_str = fname.decode("cp437")
+                fname_str = fname.decode(self._encoding)
 
             if fname_str != zinfo.orig_filename:
                 raise BadZipFile(
@@ -1740,71 +1745,51 @@
         return (fname, archivename)
 
 
-def main(args = None):
+def main(args = None, enc = None, pwd = None):
     import textwrap
     USAGE=textwrap.dedent("""\
         Usage:
-            zipfile.py -l zipfile.zip        # Show listing of a zipfile
-            zipfile.py -t zipfile.zip        # Test if a zipfile is valid
-            zipfile.py -e zipfile.zip target # Extract zipfile into target dir
-            zipfile.py -c zipfile.zip src ... # Create zipfile from sources
+            eunzip l zipfile.zip [-e encoding]        # Show listing of a zipfile
+            eunzip x zipfile.zip target [-e encoding] # Extract zipfile into target dir
         """)
     if args is None:
         args = sys.argv[1:]
 
-    if not args or args[0] not in ('-l', '-c', '-e', '-t'):
+    if not args or args[0] not in ('l', 'x'):
         print(USAGE)
         sys.exit(1)
+    elif '-e' in args:
+        i = args.index('-e')
+        if i < len(args) - 1:
+            enc = args[i+1]
+            args.pop(i+1)
+        args.pop(i)
 
-    if args[0] == '-l':
+    if args[0] == 'l':
         if len(args) != 2:
             print(USAGE)
             sys.exit(1)
-        with ZipFile(args[1], 'r') as zf:
+        with ZipFile(args[1], 'r', encoding=enc) as zf:
+            import signal
+            signal.signal(signal.SIGPIPE, signal.SIG_DFL)
             zf.printdir()
 
-    elif args[0] == '-t':
-        if len(args) != 2:
-            print(USAGE)
-            sys.exit(1)
-        with ZipFile(args[1], 'r') as zf:
-            badfile = zf.testzip()
-        if badfile:
-            print("The following enclosed file is corrupted: {!r}".format(badfile))
-        print("Done testing")
-
-    elif args[0] == '-e':
+    elif args[0] == 'x':
         if len(args) != 3:
             print(USAGE)
             sys.exit(1)
 
-        with ZipFile(args[1], 'r') as zf:
-            zf.extractall(args[2])
-
-    elif args[0] == '-c':
-        if len(args) < 3:
-            print(USAGE)
-            sys.exit(1)
-
-        def addToZip(zf, path, zippath):
-            if os.path.isfile(path):
-                zf.write(path, zippath, ZIP_DEFLATED)
-            elif os.path.isdir(path):
-                if zippath:
-                    zf.write(path, zippath)
-                for nm in os.listdir(path):
-                    addToZip(zf,
-                             os.path.join(path, nm), os.path.join(zippath, nm))
-            # else: ignore
-
-        with ZipFile(args[1], 'w') as zf:
-            for path in args[2:]:
-                zippath = os.path.basename(path)
-                if not zippath:
-                    zippath = os.path.basename(os.path.dirname(path))
-                if zippath in ('', os.curdir, os.pardir):
-                    zippath = ''
-                addToZip(zf, path, zippath)
+        with ZipFile(args[1], 'r', encoding=enc) as zf:
+            try:
+                zf.testzip()
+            except RuntimeError as e:
+                if 'encrypted' in str(e):
+                    from getpass import getpass
+                    if enc is None:
+                        pwd = bytes(getpass(), sys.getfilesystemencoding())
+                    else:
+                        pwd = bytes(getpass(), enc)
+            zf.extractall(args[2], pwd=pwd)
 
 if __name__ == "__main__":
     main()
